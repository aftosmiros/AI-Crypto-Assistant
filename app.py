import streamlit as st
from utils.api_connectors import (
    get_binance_price,
    get_cryptopanic_news,
    get_coinmarketcap_data,
    convert_currency,
    get_token_ticker  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ api_connectors
)
from utils.ai_handler import generate_response

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.set_page_config(page_title="AI Crypto Assistant", layout="wide")
st.title("üìä AI Crypto Assistant")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
query = st.text_input("Ask about any Top 50 crypto (e.g., Bitcoin or SOL):", 
                     help="Supports all cryptocurrencies in Top 50 by market cap")

# –ë–ª–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
with st.expander("üí± Currency Conversion", expanded=True):
    col1, col2 = st.columns(2)
    with col1:
        convert_to = st.selectbox("Target currency:", ["USD", "EUR", "BTC", "ETH"])
    with col2:
        convert_amount = st.number_input("Amount to convert:", 
                                       min_value=0.01, 
                                       value=1.0,
                                       step=0.1)

if query:
    with st.spinner("üîç Fetching latest crypto data..."):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ api_connectors
        token = get_token_ticker(query)
        
        if not token:
            st.error("‚ùå This cryptocurrency is not in Top 50. Try 'Bitcoin' or 'Ethereum'.")
            st.stop()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        price = get_binance_price(token)
        news = get_cryptopanic_news(token)
        market_data = get_coinmarketcap_data(token)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–∞–Ω–Ω—ã—Ö
        if None in [price, news, market_data]:
            st.error("‚ö†Ô∏è API request failed. Please check your connection and try again.")
            st.stop()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –Ω–µ USD)
        if convert_to != "USD":
            converted = convert_currency(token, convert_to, convert_amount)
            if converted is not None:
                st.success(f"**{convert_amount} {token} = {converted:.6f} {convert_to}**")
            else:
                st.warning(f"Conversion {token} ‚Üí {convert_to} is not supported by Binance")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        response = generate_response(
            query=query,
            price=price,
            news=news,
            market_data=market_data,
        )
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        st.markdown("---")
        st.markdown(response)
        st.markdown("---")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å)
        with st.expander("Debug Info"):
            st.json({
                "token": token,
                "price": price,
                "convert_to": convert_to,
                "converted": converted if convert_to != "USD" else None
            })