from openai import OpenAI
from dotenv import load_dotenv
import os
from typing import Optional, Dict, List, Union

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def generate_response(
    query: str,
    price: Optional[float],
    news: List[Dict],
    market_data: Dict[str, Union[float, int, str]],
    converted: Optional[float] = None,
    convert_to: str = "USD",
    convert_amount: float = 1.0
) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        query: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
        price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        news: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (capitalization, rank)
        converted: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
        convert_to: –í–∞–ª—é—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        convert_amount: –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    """
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    news_text = "\n".join([f"- {item.get('title', 'No title')} (Source: CryptoPanic)" 
                          for item in news[:3]]) if news else "No recent news available"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
    def format_value(value, is_currency=True):
        if value is None:
            return "N/A"
        if isinstance(value, str):
            return value
        return f"${value:,.2f}" if is_currency else f"{value:,}"

    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    market_cap = market_data.get('market_cap')
    rank = market_data.get('rank', 'N/A')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    base_response = f"""
    üìä Crypto Assistant Response üìä
    
    üîπ User Question: "{query}"
    
    üí∞ Current Price: {format_value(price)}
    üìà Market Cap: {format_value(market_cap)}
    üèÜ Rank: #{rank}
    
    üì∞ Latest News:
    {news_text}
    """

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if converted and convert_to != "USD":
        conversion_text = (
            f"\nüí± Conversion: {convert_amount} {market_data.get('symbol', 'coin')} "
            f"= {format_value(converted)} {convert_to}"
        )
        base_response += conversion_text

    # –ï—Å–ª–∏ OpenAI –¥–æ—Å—Ç—É–ø–µ–Ω
    try:
        prompt = f"""
        –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ:
        
        {base_response}
        
        –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
        - –ù–∞ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –≤–æ–ø—Ä–æ—Å–∞
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
        - –° –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö —Ü–∏—Ñ—Ä
        - –ë–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞
        """
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=250,
            temperature=0.5
        )
        return response.choices[0].message.content
        
    except Exception as e:
        # Fallback –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        return base_response + "\n\n‚ÑπÔ∏è AI summary is currently unavailable."